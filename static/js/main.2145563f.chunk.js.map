{"version":3,"sources":["Components/TableHeader.js","Components/Rows.js","Components/Stock.js","Components/Constants.js","Components/WebSocket.js","Redux/Action/Actions.js","App.js","Redux/Reducer/Reducer.js","Redux/Store/Store.js","Middleware/AppMiddleware.js","serviceWorker.js","index.js"],"names":["TableHeader","key","red","backgroundColor","green","connect","state","props","shareColor","shares","companyName","color","sharePrice","price","console","log","colour","time","Date","toLocaleString","style","Object","keys","rows","length","push","id","MAX_RETRY_COUNTS","client","W3CWebSocket","WebSocket","closeConnection","retryCount","count","retryCounts","setState","setTimeout","checkForConnection","Math","min","alert","getConnection","onopen","onmessage","message","data","setShares","onerror","err","close","onclose","e","readyState","CLOSED","this","Component","shareObj","type","payload","App","initialState","rootReducer","action","temp","JSON","parse","i","company","undefined","middlewares","store","next","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2145563f.chunk.js","sourcesContent":["import React from \"react\";\n\nconst TableHeader = () => {\n  return (\n    <tr key={\"tableHeader\"}>\n      <td>Company Name</td>\n      <td>Share Price</td>\n      <td>Last Updated</td>\n    </tr>\n  );\n};\n\nexport default TableHeader;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nconst Rows = ({ shareColor, sharePrice, ...props }) => {\n  console.log(\"amar \" + props.companyName);\n  let colour = shareColor === 0 ? {} : shareColor === 1 ? red : green;\n  let time = new Date().toLocaleString();\n\n  return (\n    <tr key={props.key} style={colour}>\n      <td>{props.companyName}</td>\n      <td>{sharePrice}</td>\n      <td>{time}</td>\n    </tr>\n  );\n};\n\nconst red = { backgroundColor: \"#FF0000\" };\nconst green = { backgroundColor: \"#58FF33\" };\n\nconst mapStateToProps = (state, props) => {\n  return {\n    shareColor: state.shares[props.companyName].color,\n    sharePrice: state.shares[props.companyName].price\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  {}\n)(Rows);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport TableHeader from \"./TableHeader\";\nimport Rows from \"./Rows\";\n\nconst Stock = shares => {\n  let rows = [];\n  for (let key = 0; key < shares.shares.length; key++) {\n    rows.push(<Rows key={shares.shares[key]} companyName={shares.shares[key]} />);\n  }\n\n  return (\n    <div>\n      <h1 id=\"title\">Share Market World</h1>\n      <table id=\"sharesTable\">\n        <thead>\n          <TableHeader />\n        </thead>\n        <tbody>{rows}</tbody>\n      </table>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    shares: Object.keys(state.shares)\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  {}\n)(Stock);\n","export const WEB_SOCKET_URL = \"ws://stocks.mnet.website\";\nexport const SET_SHARES = \"SET_SHARES\";\nexport const MAX_RETRY_COUNTS = 3;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport { setShares } from \"../Redux/Action/Actions\";\nimport { WEB_SOCKET_URL, MAX_RETRY_COUNTS } from \"../Components/Constants\";\n\nconst client = new W3CWebSocket(WEB_SOCKET_URL);\n\nclass WebSocket extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { retryCounts: 0 };\n  }\n\n  componentWillMount() {\n    console.log(\"yup\");\n    this.getConnection();\n  }\n\n  closeConnection = () => {\n    console.log(this.state.retryCount);\n    let count = this.state.retryCounts;\n    if (count === MAX_RETRY_COUNTS) {\n      alert(\"Max retry reached for connection to server, Please retry again after some time\");\n      return;\n    }\n    this.setState({ retryCounts: count++ });\n    setTimeout(this.checkForConnection, Math.min(10000, 250 * count));\n  };\n\n  getConnection = () => {\n    client.onopen = () => {};\n    client.onmessage = message => {\n      console.log(message.data);\n      this.props.setShares(message.data);\n    };\n    client.onerror = err => {\n      alert(\"Error in connection establishment\");\n      client.close();\n    };\n\n    client.onclose = e => {\n      this.closeConnection();\n    };\n  };\n\n  checkForConnection = () => {\n    if (!client || client.readyState === W3CWebSocket.CLOSED) this.getConnection(); //check if websocket instance is closed, if so call `connect` function.\n  };\n\n  render() {\n    return <div></div>;\n  }\n}\n\nexport default connect(\n  null,\n  { setShares }\n)(WebSocket);\n","import { SET_SHARES } from \"../../Components/Constants\";\n\nexport const setShares = shareObj => ({\n  type: SET_SHARES,\n  payload: {\n    shareObj\n  }\n});\n","import React from \"react\";\nimport \"./App.css\";\nimport Stock from \"./Components/Stock\";\nimport WebSocket from \"./Components/WebSocket\";\n\nfunction App() {\n  return (\n    <div>\n      <WebSocket />\n      <Stock />\n    </div>\n  );\n}\n\nexport default App;\n","const initialState = {\n  shares: {}\n};\nfunction rootReducer(state = initialState, action) {\n  switch (action.type) {\n    case \"SET_SHARES\": {\n      let temp = action.payload.shareObj;\n      const data = JSON.parse(temp);\n      let shares = state.shares;\n      for (let i = 0; i < data.length; i++) {\n        let company = data[i][0];\n        let price = data[i][1];\n        if (shares[company] !== undefined) {\n          if (price > shares[company].price) {\n            shares[company][\"color\"] = 1;\n          } else if (price < shares[company].price) {\n            shares[company][\"color\"] = 2;\n          } else {\n            shares[company][\"color\"] = 0;\n          }\n        } else {\n          if (Object.keys(shares).length > 25) break;\n          shares[company] = {};\n          shares[company][\"price\"] = price;\n          shares[company][\"color\"] = 0;\n        }\n      }\n\n      return {\n        ...state,\n        shares: { ...state.shares }\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n\nexport default rootReducer;\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport rootReducer from \"../Reducer/Reducer.js\";\nimport { customMiddleWare } from \"../../Middleware/AppMiddleware\";\n\nconst middlewares = [customMiddleWare];\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(rootReducer, composeEnhancer(applyMiddleware(...middlewares)));\nexport default store;\n","export const customMiddleWare = store => next => action => {\n  next(action);\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport store from \"./Redux/Store/Store\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n/*export const loadState = () => ({\n  loader: {},\n  shares: {}\n});*/\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}